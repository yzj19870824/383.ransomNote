ransomNote = "aa"
magazine = "ab"


        ransomNoteCnt = collections.Counter(ransomNote)
        magazineCnt = collections.Counter(magazine)
        print ransomNoteCnt
        #Counter({'a': 2})
        print magazineCnt
        #Counter({'a': 1, 'b': 1})
        print ransomNoteCnt - magazineCnt
        #Counter({'a': 1})                  以少减多时，只保留相同键，且值相减，如果值小于０，则删除
        print magazineCnt - ransomNoteCnt
        #Counter({'b': 1})                  以多减少时，相同键相减，如果值小于０，则被删除，同时保留多余键值对
        print ransomNoteCnt + magazineCnt
        #Counter({'a': 3, 'b': 1})          将双方的字典项相加，相应键值相加

统计字符串中各个字符出现的次数
而且他们还可以做加减运算

减法运算规则：相同键想减，如果值小于０，则从结果中删除。没有的键，可以设定其值为０


collections下面还有几个有用的东西
1 namedtuple
>>> from collections import namedtuple
>>> Point = namedtuple('Point', ['x', 'y'])
>>> p = Point(1, 2)
>>> p.x
1
>>> p.y
2

namedtuple是一个函数，它用来创建一个自定义的tuple对象，并且规定了tuple元素的个数，并可以用属性而不是索引来引用tuple的某个元素。

2 deque
deque是为了高效实现插入和删除操作的双向列表，适合用于队列和栈：

>>> from collections import deque
>>> q = deque(['a', 'b', 'c'])
>>> q.append('x')
>>> q.appendleft('y')
>>> q
deque(['y', 'a', 'b', 'c', 'x'])

deque除了实现list的append()和pop()外，还支持appendleft()和popleft()，这样就可以非常高效地往头部添加或删除元素。

3 defaultdict
使用dict时，如果引用的Key不存在，就会抛出KeyError。如果希望key不存在时，返回一个默认值，就可以用defaultdict：

>>> from collections import defaultdict
>>> dd = defaultdict(lambda: 'N/A')
>>> dd['key1'] = 'abc'
>>> dd['key1'] # key1存在
'abc'
>>> dd['key2'] # key2不存在，返回默认值
'N/A'

4 OrderedDict
使用dict时，Key是无序的。在对dict做迭代时，我们无法确定Key的顺序。

如果要保持Key的顺序，可以用OrderedDict：

>>> from collections import OrderedDict
>>> d = dict([('a', 1), ('b', 2), ('c', 3)])
>>> d # dict的Key是无序的
{'a': 1, 'c': 3, 'b': 2}
>>> od = OrderedDict([('a', 1), ('b', 2), ('c', 3)])
>>> od # OrderedDict的Key是有序的
OrderedDict([('a', 1), ('b', 2), ('c', 3)])

注意，OrderedDict的Key会按照插入的顺序排列，不是Key本身排序：

